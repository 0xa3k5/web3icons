name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          version: npx changeset version
          publish: npx changeset publish
          title: "Version Packages"
          commit: "Version Packages"
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Enhanced GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const publishedPackages = JSON.parse('${{ steps.changesets.outputs.publishedPackages }}')
            
            for (const pkg of publishedPackages) {
              const releaseNotes = `## ðŸš€ ${pkg.name}@${pkg.version}
              
              ### Changes
              This release includes updates from the latest changesets.
              
              ### Package Links
              - **NPM**: https://www.npmjs.com/package/${pkg.name}/v/${pkg.version}
              - **Documentation**: https://web3icons.io/docs
              
              ### Installation
              \`\`\`bash
              bun add ${pkg.name}@${pkg.version}
              # or
              npm install ${pkg.name}@${pkg.version}
              \`\`\`
              
              ---
              *Released automatically via changesets*`
              
              try {
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: \`\${pkg.name}@\${pkg.version}\`,
                  name: \`\${pkg.name}@\${pkg.version}\`,
                  body: releaseNotes,
                  draft: false,
                  prerelease: pkg.version.includes('beta') || pkg.version.includes('alpha') || pkg.version.includes('rc')
                })
                console.log(\`Created release for \${pkg.name}@\${pkg.version}\`)
              } catch (error) {
                console.error(\`Failed to create release for \${pkg.name}@\${pkg.version}:\`, error.message)
                // Don't fail the workflow if release creation fails
              }
            }