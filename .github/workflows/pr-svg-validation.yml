name: SVG Validation

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'raw-svgs/**'
      - 'packages/core/**/*.svg'
      - 'packages/core/src/svgs/**'

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  validate-svgs:
    runs-on: ubuntu-latest
    if: github.head_ref != 'changeset-release/main'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install Dependencies
        run: bun install

      - name: Check for missing metadata
        id: metadata
        run: |
          # Run metadata check and capture output
          if bun run check-missing -- --ci > metadata_output.txt 2>&1; then
            echo "has_missing_metadata=false" >> $GITHUB_OUTPUT
            echo "No missing metadata"
          else
            echo "has_missing_metadata=true" >> $GITHUB_OUTPUT
            echo "Missing metadata detected"
            # Store the output for the comment (limit to 20 lines)
            METADATA_OUTPUT=$(cat metadata_output.txt | head -20)
            echo "metadata_output<<EOF" >> $GITHUB_OUTPUT
            echo "$METADATA_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Validate SVG files
        id: svg_validation
        run: |
          # Get changed SVG files
          CHANGED_SVGS=$(git diff --name-only HEAD~1 HEAD | grep '\.svg$' || true)
          
          if [[ -n "$CHANGED_SVGS" ]]; then
            echo "has_svg_changes=true" >> $GITHUB_OUTPUT
            echo "Found SVG changes:"
            echo "$CHANGED_SVGS"
            
            # Run proper SVG validation using the validation script
            VALIDATION_ERRORS=""
            
            # Convert newlines to comma-separated list for the validation script
            SVG_LIST=$(echo "$CHANGED_SVGS" | tr '\n' ',')
            
            # Run the validation script
            if bun validate-svgs "$SVG_LIST" > svg_validation_output.txt 2>&1; then
              echo "SVG validation passed"
              echo "has_svg_errors=false" >> $GITHUB_OUTPUT
            else
              echo "SVG validation failed"
              echo "has_svg_errors=true" >> $GITHUB_OUTPUT
              # Store validation output for the comment
              VALIDATION_OUTPUT=$(cat svg_validation_output.txt | head -20)
              echo "svg_errors<<EOF" >> $GITHUB_OUTPUT
              echo "$VALIDATION_OUTPUT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_svg_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment - Missing metadata
        if: steps.metadata.outputs.has_missing_metadata == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            const metadataOutput = `${{ steps.metadata.outputs.metadata_output }}`;
            
            const comment = `**Missing metadata detected**
            
            Some icons are missing metadata entries. Please add metadata for:
            
            \`\`\`
            ${metadataOutput}
            \`\`\`
            
            Run \`bun run add-icons\` to add missing metadata.`;
            
            // Check if comment already exists
            const comments = await github.rest.issues.listComments({
              owner, repo, issue_number: number
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('**Missing metadata detected**')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner, repo, comment_id: existingComment.id, body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number: number, body: comment
              });
            }

      - name: Comment - SVG validation errors
        if: steps.svg_validation.outputs.has_svg_errors == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            const svgErrors = `${{ steps.svg_validation.outputs.svg_errors }}`;
            
            const comment = `**SVG validation errors**
            
            The following SVG validation issues were found:
            
            \`\`\`
            ${svgErrors}
            \`\`\`
            
            Please fix these issues before merging.`;
            
            // Check if comment already exists
            const comments = await github.rest.issues.listComments({
              owner, repo, issue_number: number
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('**SVG validation errors**')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner, repo, comment_id: existingComment.id, body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number: number, body: comment
              });
            }

      - name: Comment - All validations passed
        if: steps.metadata.outputs.has_missing_metadata == 'false' && (steps.svg_validation.outputs.has_svg_changes == 'false' || steps.svg_validation.outputs.has_svg_errors == 'false')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // Remove any existing validation error comments
            const comments = await github.rest.issues.listComments({
              owner, repo, issue_number: number
            });
            
            const errorComments = comments.data.filter(comment => 
              comment.body.includes('**Missing metadata detected**') || 
              comment.body.includes('**SVG validation errors**')
            );
            
            for (const comment of errorComments) {
              await github.rest.issues.deleteComment({
                owner, repo, comment_id: comment.id
              });
            }